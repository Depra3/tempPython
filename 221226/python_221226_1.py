# -*- coding: utf-8 -*-
"""python_221226.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11BP_7LXUa5bMbNzzD2JNBmfyXMx0woFX

## 기초 문법

### 파이썬 확장자명
- .py : 개발용
- .ipynb : 분석가, 데이터 사이언티스트, 강의용
 + 주피터 노트북, 주피터 랩
"""

1+1

print("Hello, World")

"""## 주석 처리
- 한줄 주석처리
- 여러줄 주석 처리
"""

# 한줄 주석 처리, 주석

print("Hello, World1")

"""
ssss
dsaf
asdf
"""
'''
asdfasd
'''
print("Hello, World2")

"""ipynb 파일을 md + 이미지 같이 변환 가능
--> 노션에서 내보내기와 동일

## 그림

## 변수의 종류
- 변수의 종류 : 숫자, 문자, 논리(True, false), NULL
"""

# 정수형
num_int = 1
print(num_int)
print(type(num_int))

# 실수형
num_float = 0.2
print(num_float)
print(type(num_float))

# 논리 자료형
bool_true = False # True / False
print(bool_true)
print(type(bool_true))

# NULL 자료형
none_x = None
print(none_x)
print(type(none_x))

"""## 4가지 자료형 : Scalar 자료형
- int, float, bool, NoneType
- 더는 나눌 수 없는 최소 단위의 자료형
  + 이 객체 하나로는 반복문 사용이 불가

## 정수형 사칙 연산
- 결과값의 자료형 확인
- 특이한 사칙연산자 하나 있음(나눗셈)
"""

a = 4
b = 2

c1 = a + b
c2 = a - b
c3 = a * b
c4 = a / b

print(c1); print(type(c1))
print(c2); print(type(c2))
print(c3); print(type(c3))
print(c4); print(type(c4))

"""## 실수형 사칙 연산
- 결과값의 자료형 확인

"""

a = 4.0
b = 2.0

c1 = a + b
c2 = a - b
c3 = a * b
c4 = a / b

print(c1); print(type(c1))
print(c2); print(type(c2))
print(c3); print(type(c3))
print(c4); print(type(c4))

"""## 논리형 연산자
- AND / OR / NOT(옵션)
"""

print(True and True)
print(True and False)
print(False and True)
print(False and False)

print(True or True)
print(True or False)
print(False or True)
print(False or False)

"""## 부등호 연산자
- '>', '<', '>=', '<='
"""

print(4>3); print(4<3); print(4>=3); print(4<=3)

"""## 두개의 값 비교
- 입력받아서 True, False가 나오도록 간단한 프로그램 작성
- 형변환 배우기
"""

var = input("값을 입력해주세요! ")
print("-------------")
print(var)
print(type(var))

var1 = int(input("값을 입력해주세요! "))
var2 = float(input("값을 입력해주세요! "))
var3 = str(input("값을 입력해주세요! "))
print("--------------------")
print(var1+var2)
print(var3*2) # *는 반복
print("--------------------")
print(type(var1+var2))
print(type(var3))

print(var1>var2)

"""시퀀스 자료형 : String, List, Tuple => numpy,pandas
Non 시퀀스 자료형 : Set, Dictionary

## 오후 수업의 목표
- 파이썬 함수 (=Methods) 사용법 익히기
- 관련 문서 확인하기(https://docs.python.org/3/search.html?q=capital&check_keywords=yes&area=default)
"""

# Capitalize
text = 'i love YOU' # str 클래스 객체
print(type(text))
result = text.capitalize()
print(result)

# Capitalize
text = 'i love YOU' # str 클래스 객체
print(type(text))
result = text.capital()
print(result)

text = '    python is best    '
print(text)
result = text.strip()
print(result)

# split
# 문장을 분리하는 메서드
text = "바퀴에 대한 파단면 분석, 성분분석 등을 조사한 결과 사고원인은 사고바퀴가 사용한도에 도달하기 이전에 피로파괴로 파손된 것으로 나타났다."
result = text.split(' ')
print(result) # 결과값이 list로 나옴

"""# 리스트 자료형"""

a = [100, 200, 300]
result = a.append(400)
print(a)
# 기대값 [100, 200, 300]
# 결과값 [100, 200, 300, 400]
print(result)
# 기대값 [100, 200, 300, 400]
# 결과값 None
# ==> 리스트에서 자주 발생

b = [400, 500, 600]
# a.append(400)
# a.append(500)
# a.append(600)
a.append(b)
print(a)

"""문자열과 리스트 저장 방식이 다름"""

a = [100, 200, 300]
b = [400, 500, 600]

# 반복문 활용(복잡)
# extend()
a.extend(b)

print(a)

"""- 리스트 중간에 새로운 값을 추가"""

# insert()
a = [100, 200, 300]

# 100과 200 사이에 150을 추가
# insert(index, value) index자리의 값을 뒤로 밀고 index 자리에 value를 추가
a.insert(1,150)
print(a)

"""# 리스트 내 특정 값 삭제"""

# remove(value) index아님
# list안에 없는 value값을 넣을 시 오류 발생
# 0자리부터 시작
a = [1, 2, 1, 2]
a.remove(1)
print(a)

a.remove(1)
print(a)

a = [0, 1, 2 , 3, 4, 5, 6, 7, 8, 9]

# 1 삭제 del a[index] value아님
del a[1]
print(a)

# 범위로 삭제
del a[1:5] # index 1부터 5까지 삭제
print(a)

a.pop()
print(a)

# 전체 삭제
a.clear()
print(a)

a = ["Gold", "Gold", "Silver", "Silver"]

# Silver가 처음 등장하는 index 번호 궁금
print(a.index("Silver"))

# 정렬(오름차순)
a = [1, 6, 5, 2, 3, 4]
a.sort()
print(a)

# 내림차순
a.sort(reverse=True)
# a.reverse() - 순서 거꾸로 함
print(a)

a = [1, 6, 5, 2, 3, 4, "a"]
a.sort() # sort는 숫자 정렬만 가능
b = ["b", "c", "a"]
b.sort()
print(b)

a = [1, 6, 5, 2, 3, 4]
print(min(a))
print(max(a))
print(len(a))

"""# List vs Tuple
- List : 한번 생성 후, Mutable(수정,삭제,추가 가능), [1, 2, 3] 
- Tuple : 한번 생성 후, Immutable(수정, 삭제, 추가 불가, (1, 2 ,3)

  => 메모리 효율성 측면 : Tuple이 List보다 좋음

# 튜플
- 튜플 생성
"""

tuple1 = (0, )
tuple2 = (0, 1, 2)
tuple3 = 0, 1, 2, 3

print(tuple1)
print(tuple2)
print(tuple3)
print("-----------------")
print(type(tuple1))
print(type(tuple2))
print(type(tuple3))

print(tuple1 + tuple3)
print("-----------------")
tuple0 = (1) # 소괄호 안에 쉼표가 없으면 int 취급
print(tuple0)
print(type(tuple0))

tuple0 = (1) # 소괄호 안에 쉼표가 없으면 int 취급
print(tuple0)
print(type(tuple0))

a = (0, 1, 2)
a.append(4)
print(a)

a = (0, 1, 2, "A")
print(a)

a.remove("A") # 수정 불가
print(a)

a = (0, 1, 2, "A")
del a[3]
print(a)

"""### 튜플 인덱싱 및 슬라이싱"""

tuple0 = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
print(tuple0[0])
print(tuple0[4])
print(tuple0[::3])

"""## Dictionary
- JSON과 유사한 자료
"""

# {key:value}
numbers = {1 : "One", 2 : "Two", 3 : "Three"}
print(numbers)

country_capital = {"한국":"서울", "일본":"동경", "중국":"북경"}
print(country_capital)

print(numbers[1])
print(country_capital["한국"])

numbers[4] = "Four"
print(numbers)

country_capital["미국"] = "뉴욕"
print(country_capital)

"""- 틀린 값 수정"""

country_capital["미국"] = "워싱턴"
print(country_capital)

"""- 삭제"""

del country_capital["미국"]
print(country_capital)

"""### Dictionary 메서드
- keys() : key 값만 출력
- values() : value 값만 출력
"""

result = list(country_capital.keys())
print(result)
print(type(result))

result = list(country_capital.values())
print(result)
print(type(result))

result = list(country_capital.items())
print(result)
print(type(result))

"""## 조건문"""

score = int(input("점수를 입력해주세요 (0~100) : "))
print(score)

if score >= 90:
  #코드 작성
  print('A등급')
elif score >= 80:
  print('B등급')
elif score >= 70:
  print('C등급')
elif score >= 60:
  print('D등급')
elif score >= 50:
  print('E등급')
else :
  print('F등급')



"""## 반복문
- Hello World 여러번 입력
"""

range(3)

# for i in 범위가 정해진 값:

for i in range(3):
  # 코드 작성
  print(i+1, "Hello World")

a = "Hello"
for x in a:
  print(x)

a = [100, 200, 300]
for x in a:
  print(x)

# for i in 범위가 정해진 값(=시퀀스 데이터):

"""## 파이썬 반복문 여러가지 방법
- 종류 겁나 많음
"""

a = ["A", "B", "C"]

num = 0
for idx in a:
  print(num, idx)
  num = num+1

a = ["A", "B", "C"]

for idx, value in enumerate(a):
  print(idx, value)

str_list = ["A", "B", "C"]
num_list = [1, 2, 3]

for strs, nums in zip(str_list, num_list):
  print(strs, nums)

"""## while문"""

i = 1
while i < 7:
  print("Hello World")
  i = i+1 # i += 1

"""## 파이썬 다운 문법 : 파이써닉 방식
- Pythonic way
- for loop 반복문을 한 줄로 처리
- List Comprehension (리스트 컴프리핸션)
"""

a = ['computer', 'apple', 'human', 'zoo', 'country']

# a가 들어간 문자만 리스트에 담기
result_list = []
for x in a:
  if "a" in x:
    result_list.append(x)
result_list

a = ['computer', 'apple', 'human', 'zoo', 'country']
result2 = [x for x in a if "a" in x]
result2